#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–æ–∫ __pycache__ –≤ Python –ø—Ä–æ–µ–∫—Ç–∞—Ö.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python clean_pycache.py [–æ–ø—Ü–∏–∏] [–ø—É—Ç—å]

–û–ø—Ü–∏–∏:
    --dry-run       –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    --interactive   –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
    --quiet         –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    --no-color      –û—Ç–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
    --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
"""

import os
import sys
import shutil
import argparse
from pathlib import Path
from typing import List, Tuple


class Colors:
    """ANSI —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    RESET = '\033[0m'


class PyCacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–æ–∫ __pycache__"""
    
    def __init__(self, use_colors: bool = True):
        self.use_colors = use_colors
        self.found_dirs = []
        self.removed_dirs = []
        self.failed_dirs = []
    
    def _colorize(self, text: str, color: str) -> str:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –∫ —Ç–µ–∫—Å—Ç—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —Ü–≤–µ—Ç–∞"""
        if not self.use_colors:
            return text
        return f"{color}{text}{Colors.RESET}"
    
    def find_pycache_directories(self, root_path: Path) -> List[Path]:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ __pycache__
        
        Args:
            root_path: –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∞–ø–∫–∞–º __pycache__
        """
        pycache_dirs = []
        
        try:
            for root, dirs, files in os.walk(root_path):
                # –ò—â–µ–º –ø–∞–ø–∫–∏ __pycache__ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if '__pycache__' in dirs:
                    pycache_path = Path(root) / '__pycache__'
                    pycache_dirs.append(pycache_path)
                    
        except PermissionError as e:
            print(self._colorize(f"‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}", Colors.YELLOW))
        except Exception as e:
            print(self._colorize(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}", Colors.RED))
        
        self.found_dirs = pycache_dirs
        return pycache_dirs
    
    def remove_directory(self, dir_path: Path, interactive: bool = False) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ __pycache__
        
        Args:
            dir_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            interactive: –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            if interactive:
                response = input(f"–£–¥–∞–ª–∏—Ç—å {dir_path}? [y/N]: ").strip().lower()
                if response not in ['y', 'yes', '–¥–∞', '–¥']:
                    print(self._colorize("  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ", Colors.YELLOW))
                    return False
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if dir_path.name != '__pycache__':
                print(self._colorize(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: '{dir_path.name}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π __pycache__!", Colors.RED))
                return False
            
            # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            shutil.rmtree(dir_path)
            self.removed_dirs.append(dir_path)
            return True
            
        except PermissionError:
            error_msg = f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {dir_path}"
            print(self._colorize(error_msg, Colors.RED))
            self.failed_dirs.append((dir_path, "Permission denied"))
            return False
            
        except FileNotFoundError:
            # –ü–∞–ø–∫–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
            print(self._colorize(f"‚ö†Ô∏è  –ü–∞–ø–∫–∞ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_path}", Colors.YELLOW))
            return False
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {dir_path}: {e}"
            print(self._colorize(error_msg, Colors.RED))
            self.failed_dirs.append((dir_path, str(e)))
            return False
    
    def clean_pycache(self, root_path: Path, dry_run: bool = False, 
                     interactive: bool = False, quiet: bool = False) -> Tuple[int, int, int]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ __pycache__ –ø–∞–ø–æ–∫
        
        Args:
            root_path: –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            dry_run: –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
            interactive: –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            quiet: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–Ω–∞–π–¥–µ–Ω–æ, —É–¥–∞–ª–µ–Ω–æ, –æ—à–∏–±–æ–∫)
        """
        if not quiet:
            print(self._colorize(f"üîç –ü–æ–∏—Å–∫ –ø–∞–ø–æ–∫ __pycache__ –≤: {root_path}", Colors.CYAN))
        
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ __pycache__
        pycache_dirs = self.find_pycache_directories(root_path)
        
        if not pycache_dirs:
            if not quiet:
                print(self._colorize("‚ú® –ü–∞–ø–∫–∏ __pycache__ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", Colors.GREEN))
            return 0, 0, 0
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
        if not quiet:
            print(self._colorize(f"\nüìÅ –ù–∞–π–¥–µ–Ω–æ {len(pycache_dirs)} –ø–∞–ø–æ–∫ __pycache__:", Colors.BLUE))
            for i, dir_path in enumerate(pycache_dirs, 1):
                relative_path = dir_path.relative_to(root_path)
                print(f"  {i:2d}. {relative_path}")
        
        if dry_run:
            if not quiet:
                print(self._colorize(f"\nüß™ DRY RUN: –ë—ã–ª–æ –±—ã —É–¥–∞–ª–µ–Ω–æ {len(pycache_dirs)} –ø–∞–ø–æ–∫", Colors.MAGENTA))
            return len(pycache_dirs), 0, 0
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–æ–∫
        if not quiet:
            print(self._colorize(f"\nüóëÔ∏è  –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ...", Colors.YELLOW))
        
        removed_count = 0
        for i, dir_path in enumerate(pycache_dirs, 1):
            if not quiet:
                relative_path = dir_path.relative_to(root_path)
                print(f"  {i:2d}/{len(pycache_dirs)} {relative_path} ... ", end="")
                
            if self.remove_directory(dir_path, interactive):
                if not quiet:
                    print(self._colorize("‚úÖ –£–¥–∞–ª–µ–Ω–æ", Colors.GREEN))
                removed_count += 1
            elif not quiet:
                print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        
        return len(pycache_dirs), removed_count, len(self.failed_dirs)
    
    def print_summary(self, found: int, removed: int, failed: int, quiet: bool = False):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if quiet and found == 0:
            return
            
        print(self._colorize("\n" + "="*50, Colors.BOLD))
        print(self._colorize("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê", Colors.BOLD))
        print(self._colorize("="*50, Colors.BOLD))
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫:     {self._colorize(str(found), Colors.BLUE)}")
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:   {self._colorize(str(removed), Colors.GREEN)}")
        
        if failed > 0:
            print(f"‚ùå –û—à–∏–±–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è:   {self._colorize(str(failed), Colors.RED)}")
            
            if not quiet and self.failed_dirs:
                print(self._colorize("\nüö® –û—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è:", Colors.RED))
                for dir_path, error in self.failed_dirs:
                    print(f"  ‚Ä¢ {dir_path}: {error}")
        
        if removed > 0:
            freed_space = self._estimate_freed_space()
            if freed_space:
                print(f"üíæ –ü—Ä–∏–º–µ—Ä–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {self._colorize(freed_space, Colors.MAGENTA)}")
        
        print(self._colorize("="*50 + "\n", Colors.BOLD))
    
    def _estimate_freed_space(self) -> str:
        """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
        # –û—á–µ–Ω—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: –∫–∞–∂–¥–∞—è –ø–∞–ø–∫–∞ __pycache__ ~ 100KB - 2MB
        removed_count = len(self.removed_dirs)
        if removed_count == 0:
            return ""
        
        # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤ 500KB –Ω–∞ –ø–∞–ø–∫—É
        estimated_kb = removed_count * 500
        
        if estimated_kb < 1024:
            return f"{estimated_kb} KB"
        elif estimated_kb < 1024 * 1024:
            return f"{estimated_kb / 1024:.1f} MB"
        else:
            return f"{estimated_kb / (1024 * 1024):.1f} GB"


def create_argument_parser() -> argparse.ArgumentParser:
    """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏ __pycache__ –≤ Python –ø—Ä–æ–µ–∫—Ç–µ.",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s                          # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  %(prog)s /path/to/project         # –û—á–∏—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  %(prog)s --dry-run                # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
  %(prog)s --interactive            # –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  %(prog)s --quiet /path/to/project # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        """
    )
    
    parser.add_argument(
        'path',
        nargs='?',
        default='.',
        help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)'
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ –ø–∞–ø–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å –∏—Ö'
    )
    
    parser.add_argument(
        '--interactive', '-i',
        action='store_true',
        help='–ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏'
    )
    
    parser.add_argument(
        '--quiet', '-q',
        action='store_true',
        help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)'
    )
    
    parser.add_argument(
        '--no-color',
        action='store_true',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥'
    )
    
    return parser


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        parser = create_argument_parser()
        args = parser.parse_args()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏
        root_path = Path(args.path).resolve()
        if not root_path.exists():
            print(f"‚ùå –û—à–∏–±–∫–∞: –ü—É—Ç—å '{args.path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", file=sys.stderr)
            sys.exit(1)
        
        if not root_path.is_dir():
            print(f"‚ùå –û—à–∏–±–∫–∞: '{args.path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π!", file=sys.stderr)
            sys.exit(1)
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        use_colors = not args.no_color and (
            sys.stdout.isatty() and os.getenv('TERM') != 'dumb'
        )
        
        # –°–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É
        manager = PyCacheManager(use_colors=use_colors)
        
        if not args.quiet:
            print(manager._colorize("üßπ Python __pycache__ Cleaner", Colors.BOLD + Colors.CYAN))
            print(manager._colorize("="*50, Colors.CYAN))
        
        found, removed, failed = manager.clean_pycache(
            root_path,
            dry_run=args.dry_run,
            interactive=args.interactive,
            quiet=args.quiet
        )
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        manager.print_summary(found, removed, failed, args.quiet)
        
        # –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: 0 –µ—Å–ª–∏ –≤—Å–µ OK, 1 –µ—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏
        sys.exit(1 if failed > 0 else 0)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
