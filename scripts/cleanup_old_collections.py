#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π Qdrant –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Jina v3.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
- –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é code_chunks (384d)
- –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ repo_sum_v3 (1024d)
- –°–æ–∑–¥–∞—ë—Ç backup –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
"""

import os
import sys
import json
import logging
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from qdrant_client import QdrantClient
    from qdrant_client.http.exceptions import ResponseHandlingException
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: qdrant-client –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r requirements.txt")
    sys.exit(1)

from config import get_config
from rag.exceptions import VectorStoreException, VectorStoreConnectionError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('scripts/cleanup.log', mode='a', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)


class QdrantCleanupManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π Qdrant"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–∏—Å—Ç–∫–∏"""
        try:
            self.config = get_config(require_api_key=False)
            self.vector_config = self.config.rag.vector_store
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            self.client = self._initialize_client()
            
            # –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            self.old_collections = ["code_chunks", "code_chunks_v1", "code_chunks_v2"]
            self.new_collection = self.vector_config.collection_name  # repo_sum_v3
            
            logger.info("QdrantCleanupManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ QdrantCleanupManager: {e}")
            raise VectorStoreException(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å cleanup manager: {e}")
    
    def _initialize_client(self) -> QdrantClient:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Qdrant –∫–ª–∏–µ–Ω—Ç"""
        try:
            client = QdrantClient(
                host=self.vector_config.host,
                port=self.vector_config.port,
                prefer_grpc=self.vector_config.prefer_grpc,
                timeout=30
            )
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant: {self.vector_config.host}:{self.vector_config.port}")
            return client
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {e}")
            raise VectorStoreConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Qdrant: {e}")
    
    def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant"""
        try:
            collections = self.client.get_collections()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant —É—Å–ø–µ—à–Ω–æ. –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections.collections)}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {e}")
            return False
    
    def list_collections(self) -> Dict[str, Any]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ Qdrant"""
        try:
            collections_response = self.client.get_collections()
            
            collections_info = {}
            for collection in collections_response.collections:
                try:
                    collection_info = self.client.get_collection(collection.name)
                    collections_info[collection.name] = {
                        'status': collection_info.status if hasattr(collection_info, 'status') else 'unknown',
                        'vectors_count': collection_info.vectors_count if hasattr(collection_info, 'vectors_count') else 0,
                        'points_count': collection_info.points_count if hasattr(collection_info, 'points_count') else 0,
                        'config': {
                            'vector_size': collection_info.config.params.vectors.size if hasattr(collection_info, 'config') else 'unknown',
                            'distance': str(collection_info.config.params.vectors.distance) if hasattr(collection_info, 'config') else 'unknown'
                        }
                    }
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {collection.name}: {e}")
                    collections_info[collection.name] = {'error': str(e)}
            
            return collections_info
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {e}")
            return {}
    
    def backup_collection_metadata(self, collection_name: str) -> bool:
        """–°–æ–∑–¥–∞—ë—Ç backup –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        try:
            backup_dir = Path("scripts/backups")
            backup_dir.mkdir(exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collection_info = self.client.get_collection(collection_name)
            
            # –°–æ–∑–¥–∞—ë–º backup —Ñ–∞–π–ª
            timestamp = datetime.now(timezone.utc).strftime("%Y%m%d_%H%M%S")
            backup_file = backup_dir / f"{collection_name}_metadata_{timestamp}.json"
            
            backup_data = {
                'collection_name': collection_name,
                'backup_timestamp': datetime.now(timezone.utc).isoformat(),
                'status': str(collection_info.status) if hasattr(collection_info, 'status') else 'unknown',
                'vectors_count': collection_info.vectors_count if hasattr(collection_info, 'vectors_count') else 0,
                'points_count': collection_info.points_count if hasattr(collection_info, 'points_count') else 0,
                'indexed_vectors_count': collection_info.indexed_vectors_count if hasattr(collection_info, 'indexed_vectors_count') else 0,
                'config': {
                    'vector_size': collection_info.config.params.vectors.size if hasattr(collection_info, 'config') else None,
                    'distance': str(collection_info.config.params.vectors.distance) if hasattr(collection_info, 'config') else None,
                } if hasattr(collection_info, 'config') else {}
            }
            
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"‚úÖ Backup –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {collection_name} —Å–æ–∑–¥–∞–Ω: {backup_file}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup –¥–ª—è {collection_name}: {e}")
            return False
    
    def delete_collection_safe(self, collection_name: str) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å backup"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            try:
                collection_info = self.client.get_collection(collection_name)
                logger.info(f"üìã –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} –Ω–∞–π–¥–µ–Ω–∞")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                vectors_count = collection_info.vectors_count if hasattr(collection_info, 'vectors_count') else 0
                points_count = collection_info.points_count if hasattr(collection_info, 'points_count') else 0
                logger.info(f"   üìä –í–µ–∫—Ç–æ—Ä–æ–≤: {vectors_count}, –¢–æ—á–µ–∫: {points_count}")
                
            except Exception:
                logger.info(f"‚ÑπÔ∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return True
            
            # –°–æ–∑–¥–∞—ë–º backup –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if not self.backup_collection_metadata(collection_name):
                logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup –¥–ª—è {collection_name}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ")
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
            result = self.client.delete_collection(collection_name)
            
            if result:
                logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é {collection_name}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {collection_name}: {e}")
            return False
    
    def cleanup_old_collections(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        success_count = 0
        
        logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π...")
        
        for collection_name in self.old_collections:
            logger.info(f"üóëÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: {collection_name}")
            
            if self.delete_collection_safe(collection_name):
                success_count += 1
                logger.info(f"‚úÖ {collection_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {collection_name}")
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏: {success_count}/{len(self.old_collections)} –∫–æ–ª–ª–µ–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        
        return success_count == len(self.old_collections)
    
    def prepare_new_collection_space(self) -> bool:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        try:
            logger.info(f"üÜï –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {self.new_collection}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –Ω–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è
            try:
                existing_info = self.client.get_collection(self.new_collection)
                logger.warning(f"‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è {self.new_collection} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                vectors_count = existing_info.vectors_count if hasattr(existing_info, 'vectors_count') else 0
                vector_size = existing_info.config.params.vectors.size if hasattr(existing_info, 'config') else 'unknown'
                
                logger.info(f"   üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: {vectors_count} –≤–µ–∫—Ç–æ—Ä–æ–≤, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {vector_size}")
                
                if vector_size == 1024:
                    logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {self.new_collection} —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å (1024d)")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è {self.new_collection} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {vector_size}")
                    
                    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏
                    response = input(f"–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é {self.new_collection}? (y/N): ").strip().lower()
                    if response in ['y', 'yes', '–¥–∞']:
                        logger.info(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é {self.new_collection}")
                        return self.delete_collection_safe(self.new_collection)
                    else:
                        logger.info("‚ÑπÔ∏è  –û—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                        return False
                        
            except Exception:
                logger.info(f"‚úÖ –ú–µ—Å—Ç–æ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {self.new_collection} —Å–≤–æ–±–æ–¥–Ω–æ")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
            return False
    
    def run_cleanup(self, interactive: bool = True) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π Qdrant –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Jina v3")
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not self.health_check():
                return False
            
            # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            logger.info("üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Qdrant:")
            collections = self.list_collections()
            for name, info in collections.items():
                if 'error' in info:
                    logger.warning(f"   ‚ùå {name}: {info['error']}")
                else:
                    vector_size = info.get('config', {}).get('vector_size', 'unknown')
                    points = info.get('points_count', 0)
                    logger.info(f"   üìä {name}: {points} —Ç–æ—á–µ–∫, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {vector_size}")
            
            # 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if interactive:
                print(f"\nüîÑ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {', '.join(self.old_collections)}")
                print(f"üÜï –ò –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {self.new_collection}")
                
                response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É? (y/N): ").strip().lower()
                if response not in ['y', 'yes', '–¥–∞']:
                    logger.info("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    return False
            
            # 4. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
            cleanup_success = self.cleanup_old_collections()
            
            # 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            prepare_success = self.prepare_new_collection_space()
            
            # 6. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            overall_success = cleanup_success and prepare_success
            
            if overall_success:
                logger.info("üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {self.new_collection} —Å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é 1024d")
            else:
                logger.error("‚ùå –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            
            return overall_success
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    try:
        print("üßπ –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π Qdrant –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Jina v3")
        print("=" * 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–∏—Å—Ç–∫–∏
        cleanup_manager = QdrantCleanupManager()
        
        # –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
        success = cleanup_manager.run_cleanup(interactive=True)
        
        if success:
            print("\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Jina v3 (1024d)")
            sys.exit(0)
        else:
            print("\n‚ùå –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π: scripts/cleanup.log")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
