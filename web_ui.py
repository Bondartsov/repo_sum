#!/usr/bin/env python3
"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π MD –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
–ó–∞–ø—É—Å–∫: streamlit run web_ui.py
"""

import streamlit as st
import asyncio
import os
from dotenv import load_dotenv
load_dotenv()
import zipfile
import tempfile
import shutil
from pathlib import Path
from typing import Optional, Dict, Any, Tuple
import logging
import json

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
from config import get_config, reload_config
from file_scanner import FileScanner
from parsers.base_parser import ParserRegistry
from code_chunker import CodeChunker
from openai_integration import OpenAIManager
from doc_generator import DocumentationGenerator
from utils import (
    setup_logging,
    FileInfo,
    ParsedFile,
    GPTAnalysisRequest,
    GPTAnalysisResult,
    ensure_directory_exists,
    create_error_parsed_file,
    create_error_gpt_result,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
setup_logging("DEBUG")
logger = logging.getLogger(__name__)


def validate_uploaded_file(uploaded_file) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å"""
    MAX_FILE_SIZE = 100 * 1024 * 1024  # 100MB
    ALLOWED_EXTENSIONS = {'.zip'}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if uploaded_file.size > MAX_FILE_SIZE:
        return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {uploaded_file.size / (1024*1024):.1f}MB. –ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE / (1024*1024):.0f}MB"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    file_ext = Path(uploaded_file.name).suffix.lower()
    if file_ext not in ALLOWED_EXTENSIONS:
        return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_ext}. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_EXTENSIONS)}"
    
    return True, "OK"


def safe_extract_zip(zip_path: Path, extract_to: Path) -> Tuple[bool, str, Optional[str]]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ path traversal"""
    MAX_EXTRACTED_SIZE = 500 * 1024 * 1024  # 500MB
    MAX_FILES = 10000
    
    try:
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞
            file_count = 0
            total_size = 0
            
            for zip_info in zip_ref.infolist():
                file_count += 1
                total_size += zip_info.file_size
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
                if file_count > MAX_FILES:
                    return False, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ: {file_count}. –ú–∞–∫—Å–∏–º—É–º: {MAX_FILES}", None
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                if total_size > MAX_EXTRACTED_SIZE:
                    return False, f"–ê—Ä—Ö–∏–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {total_size / (1024*1024):.1f}MB. –ú–∞–∫—Å–∏–º—É–º: {MAX_EXTRACTED_SIZE / (1024*1024):.0f}MB", None
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ path traversal
                if '..' in zip_info.filename or zip_info.filename.startswith('/'):
                    return False, f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –≤ –∞—Ä—Ö–∏–≤–µ: {zip_info.filename}", None
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
                if any(dangerous in zip_info.filename.lower() for dangerous in ['.exe', '.bat', '.sh', '.cmd']):
                    logger.warning(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ: {zip_info.filename}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
            zip_ref.extractall(extract_to)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
            extracted_dirs = [d for d in extract_to.iterdir() if d.is_dir()]
            if extracted_dirs:
                repo_path = str(extracted_dirs[0])
            else:
                repo_path = str(extract_to)
            
            return True, "OK", repo_path
            
    except zipfile.BadZipFile:
        return False, "–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤", None
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}", None


class WebRepositoryAnalyzer:
    """–ê–¥–∞–ø—Ç–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
        self.config = get_config(require_api_key=False)
        self.file_scanner = FileScanner()
        self.parser_registry = ParserRegistry()
        self.code_chunker = CodeChunker()
        self.openai_manager = None
        self.doc_generator = DocumentationGenerator()
        
    def initialize_with_api_key(self, api_key: str) -> bool:
        logger.debug(f"initialize_with_api_key: api_key length={len(api_key) if api_key else 0}, env_key_set={bool(os.getenv('OPENAI_API_KEY'))}")
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å API –∫–ª—é—á–æ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á –Ω–µ –ø—É—Å—Ç–æ–π
            if not api_key or not api_key.strip():
                logger.error("API –∫–ª—é—á –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")
                return False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            os.environ['OPENAI_API_KEY'] = api_key.strip()
            logger.debug("initialize_with_api_key: API key set in environment")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            reload_config()
            self.config = get_config()
            
            # –°–æ–∑–¥–∞–µ–º OpenAI manager —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            self.openai_manager = OpenAIManager()
            
            logger.info("OpenAI API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except ValueError as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫–ª—é—á–∞")
            return False
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å API –∫–ª—é—á–æ–º")
            return False
    
    async def analyze_repository(self, repo_path: str, output_path: str, progress_callback=None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repo_path}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            ensure_directory_exists(output_path)
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            if progress_callback:
                progress_callback("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...", 0)
            
            files_to_analyze = list(self.file_scanner.scan_repository(repo_path))
            
            if not files_to_analyze:
                return {'success': False, 'error': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(files_to_analyze)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            analyzed_files = []
            total_files = len(files_to_analyze)
            
            for i, file_info in enumerate(files_to_analyze):
                try:
                    if progress_callback:
                        progress = int((i / total_files) * 100)
                        progress_callback(f"–ê–Ω–∞–ª–∏–∑: {Path(file_info.path).name}", progress)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
                    parsed_file, gpt_result = await self._analyze_single_file(file_info)
                    analyzed_files.append((parsed_file, gpt_result))
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {file_info.path}: {e}")
                    # –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—à–∏–±–æ–∫
                    analyzed_files.append((
                        create_error_parsed_file(file_info, e),
                        create_error_gpt_result(e)
                    ))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
            if progress_callback:
                progress_callback("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...", 90)
            
            result = self.doc_generator.generate_complete_documentation(
                analyzed_files, output_path, repo_path
            )
            
            if progress_callback:
                progress_callback("–ó–∞–≤–µ—Ä—à–µ–Ω–æ!", 100)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
            if self.openai_manager:
                token_stats = self.openai_manager.get_token_usage_stats()
                result['token_stats'] = token_stats
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {'success': False, 'error': str(e)}
    
    async def _analyze_single_file(self, file_info: FileInfo):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = self.parser_registry.get_parser(file_info.path)
        if not parser:
            raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ {file_info.path}")
        
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
        parsed_file = parser.safe_parse(file_info)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        chunks = self.code_chunker.chunk_parsed_file(parsed_file)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
        gpt_request = GPTAnalysisRequest(
            chunks=chunks,
            file_path=file_info.path,
            language=file_info.language
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ GPT
        gpt_result = await self.openai_manager.analyze_code(gpt_request)
        
        return parsed_file, gpt_result
    
    def get_repository_stats(self, repo_path: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        return self.file_scanner.get_repository_stats(repo_path)


@st.cache_resource
def get_analyzer():
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    return WebRepositoryAnalyzer()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    st.title("üìö –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
    st.markdown("–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π MD –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é OpenAI GPT")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞
        st.subheader("üîë OpenAI API")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        existing_api_key = os.getenv('OPENAI_API_KEY', '')
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞
        if 'api_key_source' not in st.session_state:
            st.session_state.api_key_source = 'env' if existing_api_key else 'input'
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ API –∫–ª—é—á–∞
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ –í–∑—è—Ç—å –∏–∑ .env", disabled=not existing_api_key):
                st.session_state.api_key_source = 'env'
        with col2:
            if st.button("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"):
                st.session_state.api_key_source = 'input'
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if st.session_state.api_key_source == 'env' and existing_api_key:
            st.success("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)")
            api_key = existing_api_key
        else:
            api_key = st.text_input(
                "API –∫–ª—é—á",
                value="",
                placeholder="sk-...",
                type="password",
                help="–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://platform.openai.com/api-keys"
            )
            if api_key:
                st.success("‚úÖ API –∫–ª—é—á –≤–≤–µ–¥–µ–Ω")
            elif not existing_api_key:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env")
            else:
                st.info("‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í–∑—è—Ç—å –∏–∑ .env'")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.subheader("üõ†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        model_choice = st.selectbox(
            "–ú–æ–¥–µ–ª—å GPT",
            ["gpt-4.1-nano", "gpt-4o", "gpt-3.5-turbo"],
            index=0,
            help="gpt-4.1-nano - –±—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
        )
        
        max_files = st.number_input(
            "–ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            min_value=1,
            max_value=100,
            value=20,
            help="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"
        )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    analyzer = get_analyzer()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if 'analysis_completed' not in st.session_state:
        st.session_state.analysis_completed = False
    if 'analysis_result' not in st.session_state:
        st.session_state.analysis_result = None
    
    # –í–∫–ª–∞–¥–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    tab1, tab2, tab3 = st.tabs(["üìÅ –ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ùì –°–ø—Ä–∞–≤–∫–∞"])
    
    with tab1:
        st.header("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        upload_method = st.radio(
            "–°–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:",
            ["–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ", "ZIP –∞—Ä—Ö–∏–≤"],
            horizontal=True
        )
        
        repo_path = None
        temp_dir = None
        
        if upload_method == "–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ":
            repo_path = st.text_input(
                "–ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é",
                placeholder="C:/path/to/your/repository",
                help="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º"
            )
            
            if repo_path and Path(repo_path).exists():
                st.success(f"‚úÖ –ü–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {repo_path}")
            elif repo_path:
                st.error("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                repo_path = None
        
        else:  # ZIP –∞—Ä—Ö–∏–≤
            uploaded_file = st.file_uploader(
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º",
                type=['zip'],
                help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥"
            )
            
            if uploaded_file is not None:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                is_valid, error_msg = validate_uploaded_file(uploaded_file)
                if not is_valid:
                    st.error(f"‚ùå {error_msg}")
                    repo_path = None
                else:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    temp_dir = tempfile.mkdtemp()
                    zip_path = Path(temp_dir) / uploaded_file.name
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    with open(zip_path, 'wb') as f:
                        f.write(uploaded_file.getbuffer())
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
                    success, message, extracted_path = safe_extract_zip(zip_path, Path(temp_dir))
                    
                    if success:
                        repo_path = extracted_path
                        st.success(f"‚úÖ –ê—Ä—Ö–∏–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω: {uploaded_file.name}")
                    else:
                        st.error(f"‚ùå {message}")
                        repo_path = None
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤
        if repo_path:
            with st.expander("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"):
                try:
                    stats = analyzer.get_repository_stats(repo_path)
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤", stats['total_files'])
                    with col2:
                        st.metric("–†–∞–∑–º–µ—Ä", f"{stats['total_size'] / 1024 / 1024:.1f} MB")
                    with col3:
                        st.metric("–Ø–∑—ã–∫–æ–≤", len(stats['languages']))
                    
                    if stats['languages']:
                        st.write("**–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:**")
                        for lang, count in sorted(stats['languages'].items(), key=lambda x: x[1], reverse=True)[:5]:
                            st.write(f"‚Ä¢ {lang.title()}: {count} —Ñ–∞–π–ª–æ–≤")
                
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–ø–∫–∏: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", disabled=not (repo_path and api_key)):
            if not api_key:
                st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ OpenAI API –∫–ª—é—á")
            elif not repo_path:
                st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
            else:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å API –∫–ª—é—á–æ–º
                if not analyzer.initialize_with_api_key(api_key):
                    st.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å API –∫–ª—é—á–æ–º")
                else:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–µ—Ä–µ–¥–∞–µ–º repo_path –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ —Å–æ–∑–¥–∞–µ–º web_output
                    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ –∫–æ—Ä–Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    def update_progress(message: str, progress: int):
                        progress_bar.progress(progress)
                        status_text.text(message)
                    
                    try:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –ø–µ—Ä–µ–¥–∞–µ–º repo_path –∫–∞–∫ output_dir
                        result = asyncio.run(analyzer.analyze_repository(
                            repo_path,
                            repo_path,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º repo_path –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SUMMARY_REPORT_ –≤–Ω—É—Ç—Ä–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                            progress_callback=update_progress
                        ))
                        
                        st.session_state.analysis_result = result
                        st.session_state.analysis_completed = True
                        
                        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
                        if temp_dir and Path(temp_dir).exists():
                            shutil.rmtree(temp_dir)
                        
                        st.rerun()
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                        if temp_dir and Path(temp_dir).exists():
                            shutil.rmtree(temp_dir)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.session_state.analysis_completed and st.session_state.analysis_result:
            result = st.session_state.analysis_result
            
            if result.get('success', True):
                st.success("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤", result.get('total_files', 0))
                with col2:
                    st.metric("–£—Å–ø–µ—à–Ω–æ", result.get('successful', 0))
                with col3:
                    st.metric("–° –æ—à–∏–±–∫–∞–º–∏", result.get('failed', 0))
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
                if 'token_stats' in result:
                    token_stats = result['token_stats']
                    st.info(f"üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {token_stats.get('used_today', 0)}")
                
                # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                output_path = result.get('output_directory', './web_output')
                if Path(output_path).exists():
                    st.success(f"üìÅ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: `{output_path}`")
                    
                    # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    zip_path = Path(output_path).parent / "documentation.zip"
                    try:
                        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                            for file_path in Path(output_path).rglob('*'):
                                if file_path.is_file():
                                    arcname = file_path.relative_to(output_path)
                                    zipf.write(file_path, arcname)
                        
                        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        with open(zip_path, 'rb') as f:
                            st.download_button(
                                label="üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (ZIP)",
                                data=f.read(),
                                file_name="documentation.zip",
                                mime="application/zip"
                            )
                    
                    except Exception as e:
                        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤: {e}")
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                if st.button("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"):
                    st.session_state.analysis_completed = False
                    st.session_state.analysis_result = None
                    st.rerun()
            
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    with tab2:
        st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        if api_key:
            try:
                if analyzer.initialize_with_api_key(api_key):
                    token_stats = analyzer.openai_manager.get_token_usage_stats()
                    
                    st.metric(
                        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è", 
                        token_stats.get('used_today', 0),
                        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è"
                    )
                else:
                    st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI API")
            
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        else:
            st.info("‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    with tab3:
        st.header("‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        st.markdown("""
        ### üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä:
        
        1. **–ü–æ–ª—É—á–∏—Ç–µ OpenAI API –∫–ª—é—á:**
           - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ [OpenAI Platform](https://platform.openai.com/)
           - –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ "API Keys"
           - –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        
        2. **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:**
           - –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–æ–¥–æ–º
           - –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤
        
        3. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:**
           - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"
           - –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
           - –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        ### üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:
        """)
        
        languages = {
            "Python": ".py",
            "JavaScript": ".js, .jsx", 
            "TypeScript": ".ts, .tsx",
            "Java": ".java",
            "C++": ".cpp, .cc, .cxx, .h, .hpp",
            "C#": ".cs",
            "Go": ".go",
            "Rust": ".rs",
            "PHP": ".php",
            "Ruby": ".rb"
        }
        
        for lang, ext in languages.items():
            st.write(f"‚Ä¢ **{lang}**: {ext}")
        
        st.markdown("""
        ### üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:
        
        - **gpt-4.1-nano**: ~$0.001 –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤
        - –°—Ä–µ–¥–Ω–∏–π —Ñ–∞–π–ª: ~500-1500 —Ç–æ–∫–µ–Ω–æ–≤
        - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (20 —Ñ–∞–π–ª–æ–≤): ~$0.01-0.03
        
        ### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
        
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **gpt-4.1-nano** –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
        - –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
        
        ### üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
        
        - API –∫–ª—é—á –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
        - –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ OpenAI
        - –õ–æ–∫–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """)


if __name__ == "__main__":
    main()
