"""
PHASE 7: Jina v3 Benchmark Suite Runner - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

–í—ã–ø–æ–ª–Ω—è–µ—Ç:
- A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ BGE vs Jina v3
- –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 1024d –≤–µ–∫—Ç–æ—Ä–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ PHASE 7
- –í–∞–ª–∏–¥–∞—Ü–∏—é –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞ –º–∏–≥—Ä–∞—Ü–∏–∏

–ê–≤—Ç–æ—Ä: Claude (Cline)
–î–∞—Ç–∞: 12 —Å–µ–Ω—Ç—è–±—Ä—è 2025
"""

import sys
import os
import subprocess
import json
import time
import argparse
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(str(Path(__file__).parent.parent.parent))

class Phase7BenchmarkRunner:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö benchmark'–æ–≤ PHASE 7"""
    
    def __init__(self, output_dir: Optional[str] = None):
        self.start_time = datetime.now()
        self.output_dir = Path(output_dir) if output_dir else Path("phase7_benchmark_results")
        self.output_dir.mkdir(exist_ok=True)
        
        self.results = {
            'metadata': {
                'phase': 'PHASE 7: Quality Validation',
                'start_time': self.start_time.isoformat(),
                'jina_v3_migration': 'M2.5 completed',
                'system_status': 'Production-ready with dual task architecture'
            },
            'quality_benchmarks': {},
            'performance_benchmarks': {},
            'summary': {},
            'success_criteria': {}
        }
        
        print(f"üöÄ PHASE 7 Benchmark Suite - Jina v3 Migration Validation")
        print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {self.output_dir.absolute()}")
        print("=" * 70)
    
    def run_quality_benchmarks(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ benchmark'–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞"""
        
        print("\nüî¨ –≠–¢–ê–ü 1: A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞")
        print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ BGE-small (384d) vs Jina v3 (1024d)")
        
        quality_results = {}
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞
            cmd = [
                sys.executable, "-m", "pytest", 
                "tests/rag/test_jina_v3_quality_benchmark.py",
                "-v", "--tb=short", "-m", "integration",
                f"--junitxml={self.output_dir}/quality_junit.xml"
            ]
            
            print(f"üèÉ –í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(cmd)}")
            
            start_time = time.time()
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=Path.cwd())
            duration = time.time() - start_time
            
            quality_results.update({
                'execution_time_sec': round(duration, 2),
                'return_code': result.returncode,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'tests_status': 'PASSED' if result.returncode == 0 else 'FAILED'
            })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if result.returncode == 0:
                print(f"‚úÖ –¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ ({duration:.1f}s)")
                quality_results['analysis'] = self._analyze_quality_output(result.stdout)
            else:
                print(f"‚ùå –¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã (–∫–æ–¥ {result.returncode})")
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            quality_results.update({
                'execution_time_sec': 0,
                'return_code': -1,
                'error': str(e),
                'tests_status': 'ERROR'
            })
        
        self.results['quality_benchmarks'] = quality_results
        return quality_results
    
    def run_performance_benchmarks(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ benchmark'–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        print("\n‚ö° –≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("–ò–∑–º–µ—Ä–µ–Ω–∏–µ impact 384d ‚Üí 1024d –≤–µ–∫—Ç–æ—Ä–æ–≤")
        
        performance_results = {}
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            cmd = [
                sys.executable, "-m", "pytest",
                "tests/rag/test_jina_v3_performance_impact.py", 
                "-v", "--tb=short", "-m", "integration",
                f"--junitxml={self.output_dir}/performance_junit.xml"
            ]
            
            print(f"üèÉ –í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(cmd)}")
            
            start_time = time.time()
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=Path.cwd())
            duration = time.time() - start_time
            
            performance_results.update({
                'execution_time_sec': round(duration, 2),
                'return_code': result.returncode,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'tests_status': 'PASSED' if result.returncode == 0 else 'FAILED'
            })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if result.returncode == 0:
                print(f"‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ ({duration:.1f}s)")
                performance_results['analysis'] = self._analyze_performance_output(result.stdout)
            else:
                print(f"‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã (–∫–æ–¥ {result.returncode})")
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
                
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            performance_results.update({
                'execution_time_sec': 0,
                'return_code': -1,
                'error': str(e),
                'tests_status': 'ERROR'
            })
        
        self.results['performance_benchmarks'] = performance_results
        return performance_results
    
    def _analyze_quality_output(self, stdout: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ output —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞"""
        
        analysis = {
            'metrics_extracted': False,
            'tests_run': 0,
            'tests_passed': 0,
            'benchmark_queries': 0,
            'improvements_found': 0
        }
        
        lines = stdout.split('\n')
        
        for line in lines:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã
            if 'passed' in line and 'failed' in line:
                # –§–æ—Ä–º–∞—Ç: "5 passed, 0 failed"
                try:
                    parts = line.split()
                    for i, part in enumerate(parts):
                        if part == 'passed' and i > 0:
                            analysis['tests_passed'] = int(parts[i-1])
                        elif 'test_' in line:
                            analysis['tests_run'] += 1
                except:
                    pass
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ benchmark'–∞—Ö
            if '–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å:' in line:
                analysis['benchmark_queries'] += 1
            
            if '–£–ª—É—á—à–µ–Ω–∏–µ NDCG@10:' in line and '+' in line:
                analysis['improvements_found'] += 1
            
            if any(keyword in line for keyword in ['nDCG', 'Precision', 'MRR']):
                analysis['metrics_extracted'] = True
        
        return analysis
    
    def _analyze_performance_output(self, stdout: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ output —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        analysis = {
            'regression_tests_run': 0,
            'acceptable_regressions': 0,
            'memory_scaling_tested': False,
            'slo_compliance_checked': False,
            'critical_failures': 0
        }
        
        lines = stdout.split('\n')
        
        for line in lines:
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥—Ä–µ—Å—Å–∏–π
            if '–†–µ–≥—Ä–µ—Å—Å–∏—è –≤' in line:
                analysis['regression_tests_run'] += 1
                if '–ø—Ä–∏–µ–º–ª–µ–º–∞' in line or '‚úÖ' in line:
                    analysis['acceptable_regressions'] += 1
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            if '–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏' in line or 'memory scaling' in line:
                analysis['memory_scaling_tested'] = True
            
            # SLO —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if 'SLO' in line and ('‚úÖ' in line or 'PASSED' in line):
                analysis['slo_compliance_checked'] = True
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            if any(keyword in line for keyword in ['–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏', 'CRITICAL', '–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏']):
                analysis['critical_failures'] += 1
        
        return analysis
    
    def validate_success_criteria(self) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞ PHASE 7"""
        
        print("\nüìã –≠–¢–ê–ü 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        success_criteria = {
            'quality_validation': {
                'target': 'nDCG@10 improvement 15-25% vs BGE-small',
                'status': 'UNKNOWN',
                'details': '–¢—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ benchmark'
            },
            'performance_regression': {
                'target': 'Latency increase <2x, memory increase <3x',
                'status': 'UNKNOWN', 
                'details': '–¢—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ benchmark'
            },
            'system_stability': {
                'target': 'All tests pass, no critical failures',
                'status': 'UNKNOWN',
                'details': '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–æ–≤'
            },
            'overall_migration_success': {
                'target': 'Jina v3 ready for production deployment',
                'status': 'PENDING',
                'details': '–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Å–µ—Ö –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤'
            }
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞
        quality_benchmarks = self.results.get('quality_benchmarks', {})
        if quality_benchmarks.get('tests_status') == 'PASSED':
            success_criteria['quality_validation']['status'] = 'LIKELY_PASSED'
            success_criteria['quality_validation']['details'] = 'Quality tests passed, improvement likely achieved'
        elif quality_benchmarks.get('tests_status') == 'FAILED':
            success_criteria['quality_validation']['status'] = 'FAILED'
            success_criteria['quality_validation']['details'] = 'Quality tests failed'
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_benchmarks = self.results.get('performance_benchmarks', {})
        if performance_benchmarks.get('tests_status') == 'PASSED':
            success_criteria['performance_regression']['status'] = 'PASSED'
            success_criteria['performance_regression']['details'] = 'Performance regression within acceptable limits'
        elif performance_benchmarks.get('tests_status') == 'FAILED':
            success_criteria['performance_regression']['status'] = 'FAILED'
            success_criteria['performance_regression']['details'] = 'Performance regression too high'
        
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
        all_tests_passed = (
            quality_benchmarks.get('tests_status') == 'PASSED' and 
            performance_benchmarks.get('tests_status') == 'PASSED'
        )
        
        if all_tests_passed:
            success_criteria['system_stability']['status'] = 'PASSED'
            success_criteria['system_stability']['details'] = 'All benchmark tests passed'
        else:
            success_criteria['system_stability']['status'] = 'FAILED'
            success_criteria['system_stability']['details'] = 'Some tests failed'
        
        # –û–±—â–∏–π —É—Å–ø–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–∏
        all_criteria_met = all(
            criteria['status'] in ['PASSED', 'LIKELY_PASSED'] 
            for criteria in success_criteria.values() 
            if criteria != success_criteria['overall_migration_success']
        )
        
        if all_criteria_met:
            success_criteria['overall_migration_success']['status'] = 'PASSED'
            success_criteria['overall_migration_success']['details'] = 'All success criteria met - Jina v3 ready for production'
        else:
            success_criteria['overall_migration_success']['status'] = 'FAILED'
            success_criteria['overall_migration_success']['details'] = 'Some criteria not met - further analysis needed'
        
        self.results['success_criteria'] = success_criteria
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for criterion_name, criterion in success_criteria.items():
            status_emoji = {
                'PASSED': '‚úÖ',
                'LIKELY_PASSED': 'üü¢', 
                'FAILED': '‚ùå',
                'UNKNOWN': '‚ùì',
                'PENDING': '‚è≥'
            }.get(criterion['status'], '‚ùì')
            
            print(f"{status_emoji} {criterion_name}: {criterion['status']}")
            print(f"   –¶–µ–ª—å: {criterion['target']}")
            print(f"   –î–µ—Ç–∞–ª–∏: {criterion['details']}")
            print()
        
        return success_criteria
    
    def generate_summary_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ PHASE 7"""
        
        print("\nüìä –≠–¢–ê–ü 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        
        end_time = datetime.now()
        total_duration = (end_time - self.start_time).total_seconds()
        
        summary = {
            'phase': 'PHASE 7: Quality Validation',
            'execution_summary': {
                'start_time': self.start_time.isoformat(),
                'end_time': end_time.isoformat(),
                'total_duration_sec': round(total_duration, 2),
                'total_duration_human': f"{total_duration // 60:.0f}m {total_duration % 60:.0f}s"
            },
            'test_execution': {
                'quality_tests': self.results['quality_benchmarks'].get('tests_status', 'NOT_RUN'),
                'performance_tests': self.results['performance_benchmarks'].get('tests_status', 'NOT_RUN'),
                'total_execution_time': round(
                    self.results['quality_benchmarks'].get('execution_time_sec', 0) +
                    self.results['performance_benchmarks'].get('execution_time_sec', 0), 2
                )
            },
            'migration_readiness': self.results['success_criteria'].get('overall_migration_success', {}).get('status', 'UNKNOWN'),
            'next_steps': self._determine_next_steps(),
            'recommendations': self._generate_recommendations()
        }
        
        self.results['summary'] = summary
        
        print(f"üìã –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å PHASE 7: {summary['migration_readiness']}")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['execution_summary']['total_duration_human']}")
        print(f"üß™ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã: {summary['test_execution']['quality_tests']}")
        print(f"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {summary['test_execution']['performance_tests']}")
        
        return summary
    
    def _determine_next_steps(self) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        next_steps = []
        
        overall_status = self.results['success_criteria'].get('overall_migration_success', {}).get('status')
        
        if overall_status == 'PASSED':
            next_steps.extend([
                "‚úÖ PHASE 7 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω - Jina v3 –≥–æ—Ç–æ–≤ –∫ production",
                "üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫ PHASE 8: Production Deployment",
                "üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏",
                "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Prometheus/Grafana",
                "üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Blue-green deployment"
            ])
        elif overall_status == 'FAILED':
            next_steps.extend([
                "‚ö†Ô∏è  PHASE 7 —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã",
                "üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
                "üõ†Ô∏è  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º",
                "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ benchmark'–æ–≤",
                "üìã –í–æ–∑–º–æ–∂–Ω—ã–π –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞"
            ])
        else:
            next_steps.extend([
                "‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã PHASE 7",
                "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ log'–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏",
                "üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
            ])
        
        return next_steps
    
    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_results = self.results.get('performance_benchmarks', {})
        if perf_results.get('analysis', {}).get('critical_failures', 0) > 0:
            recommendations.append("‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        quality_results = self.results.get('quality_benchmarks', {})
        if quality_results.get('analysis', {}).get('improvements_found', 0) > 0:
            recommendations.append("üéØ Jina v3 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations.extend([
            "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–∏",
            "üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã",
            "üìä –°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞",
            "üí° –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ usage patterns"
        ])
        
        return recommendations
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ {self.output_dir}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
        report_file = self.output_dir / "phase7_benchmark_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç: {report_file}")
        
        # Markdown –æ—Ç—á–µ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
        markdown_file = self.output_dir / "phase7_benchmark_report.md"
        self._generate_markdown_report(markdown_file)
        print(f"üìù Markdown –æ—Ç—á–µ—Ç: {markdown_file}")
        
        # –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        summary_file = self.output_dir / "phase7_summary.txt"
        self._generate_text_summary(summary_file)
        print(f"üìã –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ: {summary_file}")
    
    def _generate_markdown_report(self, file_path: Path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –æ—Ç—á–µ—Ç–∞"""
        
        summary = self.results.get('summary', {})
        success_criteria = self.results.get('success_criteria', {})
        
        content = f"""# PHASE 7: Jina v3 Migration Quality Validation Report

**–î–∞—Ç–∞:** {self.start_time.strftime('%Y-%m-%d')}  
**–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {summary.get('execution_summary', {}).get('total_duration_human', 'N/A')}  
**–°—Ç–∞—Ç—É—Å:** {summary.get('migration_readiness', 'UNKNOWN')}

## üéØ –¶–µ–ª—å PHASE 7

–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å BGE-small (384d) –Ω–∞ Jina v3 (1024d) —Å dual task –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.

## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

### –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
- **–°—Ç–∞—Ç—É—Å:** {self.results.get('quality_benchmarks', {}).get('tests_status', 'NOT_RUN')}
- **–í—Ä–µ–º—è:** {self.results.get('quality_benchmarks', {}).get('execution_time_sec', 0)}s
- **–ó–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:** {self.results.get('quality_benchmarks', {}).get('analysis', {}).get('benchmark_queries', 0)}

### –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
- **–°—Ç–∞—Ç—É—Å:** {self.results.get('performance_benchmarks', {}).get('tests_status', 'NOT_RUN')}
- **–í—Ä–µ–º—è:** {self.results.get('performance_benchmarks', {}).get('execution_time_sec', 0)}s
- **–†–µ–≥—Ä–µ—Å—Å–∏–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:** {self.results.get('performance_benchmarks', {}).get('analysis', {}).get('regression_tests_run', 0)}

## ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞

"""
        
        for criterion_name, criterion in success_criteria.items():
            status_emoji = {
                'PASSED': '‚úÖ',
                'LIKELY_PASSED': 'üü¢',
                'FAILED': '‚ùå', 
                'UNKNOWN': '‚ùì',
                'PENDING': '‚è≥'
            }.get(criterion['status'], '‚ùì')
            
            content += f"""
### {criterion_name}
- **–°—Ç–∞—Ç—É—Å:** {status_emoji} {criterion['status']}
- **–¶–µ–ª—å:** {criterion['target']}
- **–î–µ—Ç–∞–ª–∏:** {criterion['details']}
"""
        
        content += f"""

## üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

"""
        for step in summary.get('next_steps', []):
            content += f"- {step}\n"
        
        content += f"""

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

"""
        for rec in summary.get('recommendations', []):
            content += f"- {rec}\n"
        
        content += f"""

## üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

- **–ú–∏–≥—Ä–∞—Ü–∏—è:** M2.5 (Jina v3 + Dual Task Architecture) ‚úÖ –ó–ê–í–ï–†–®–ï–ù–ê
- **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:** CPU-first 1024d –≤–µ–∫—Ç–æ—Ä—ã —Å task-specific LoRA –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏
- **–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:** Mock-based –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
- **–°–ª–µ–¥—É—é—â–∏–π milestone:** M3 (RAG-Enhanced Analysis)

---

*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
"""
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def _generate_text_summary(self, file_path: Path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ"""
        
        summary = self.results.get('summary', {})
        overall_status = summary.get('migration_readiness', 'UNKNOWN')
        
        content = f"""PHASE 7: Jina v3 Migration Quality Validation
============================================

–î–∞—Ç–∞: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}
–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {overall_status}
–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary.get('execution_summary', {}).get('total_duration_human', 'N/A')}

–¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞: {self.results.get('quality_benchmarks', {}).get('tests_status', 'NOT_RUN')}
–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {self.results.get('performance_benchmarks', {}).get('tests_status', 'NOT_RUN')}

–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
{
    'PASSED': '‚úÖ PHASE 7 –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù - Jina v3 –≥–æ—Ç–æ–≤ –∫ production deployment',
    'FAILED': '‚ùå PHASE 7 –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò - –Ω–µ–æ–±—Ö–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º', 
    'UNKNOWN': '‚ùì PHASE 7 –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑'
}.get(overall_status, '‚ùì –°—Ç–∞—Ç—É—Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω')

–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø: {'PHASE 8: Production Deployment' if overall_status == 'PASSED' else '–ê–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º'}
"""
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ PHASE 7 benchmark suite"""
    
    parser = argparse.ArgumentParser(description="PHASE 7: Jina v3 Migration Quality Validation")
    parser.add_argument('--output-dir', type=str, help='Output directory for results')
    parser.add_argument('--quality-only', action='store_true', help='Run only quality benchmarks')
    parser.add_argument('--performance-only', action='store_true', help='Run only performance benchmarks')
    parser.add_argument('--skip-validation', action='store_true', help='Skip success criteria validation')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º runner
    runner = Phase7BenchmarkRunner(output_dir=args.output_dir)
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
        if not args.performance_only:
            runner.run_quality_benchmarks()
        
        if not args.quality_only:
            runner.run_performance_benchmarks()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
        if not args.skip_validation:
            runner.validate_success_criteria()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        runner.generate_summary_report()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        runner.save_results()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º exit code
        overall_status = runner.results.get('success_criteria', {}).get('overall_migration_success', {}).get('status')
        exit_code = 0 if overall_status == 'PASSED' else 1
        
        print(f"\nüèÅ PHASE 7 Benchmark Suite –∑–∞–≤–µ—Ä—à–µ–Ω")
        print(f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {runner.output_dir.absolute()}")
        
        sys.exit(exit_code)
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  Benchmark suite –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        runner.save_results()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        sys.exit(2)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        runner.save_results()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –æ—à–∏–±–∫–æ–π
        sys.exit(3)


if __name__ == "__main__":
    main()
