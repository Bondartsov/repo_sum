"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ RAG —Å–∏—Å—Ç–µ–º—ã.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤:
- –ë—ã—Å—Ç—Ä—ã–µ unit —Ç–µ—Å—Ç—ã
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã  
- E2E —Ç–µ—Å—Ç—ã
- –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
"""

import sys
import subprocess
import argparse
import time
from pathlib import Path
from typing import List, Dict, Any


class RAGTestRunner:
    """–ó–∞–ø—É—Å–∫–∞–ª—å—â–∏–∫ —Ç–µ—Å—Ç–æ–≤ RAG —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.base_path = Path(__file__).parent
        self.results = []
    
    def run_command(self, cmd: List[str], description: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        print(f"\n{'='*60}")
        print(f"üß™ {description}")
        print(f"{'='*60}")
        print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        print()
        
        start_time = time.time()
        
        try:
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                cwd=self.base_path.parent.parent,  # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
                timeout=300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            )
            
            duration = time.time() - start_time
            
            success = result.returncode == 0
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if success:
                print(f"‚úÖ –£–°–ü–ï–• –∑–∞ {duration:.2f}s")
            else:
                print(f"‚ùå –û–®–ò–ë–ö–ê –∑–∞ {duration:.2f}s")
                print(f"Return code: {result.returncode}")
            
            if result.stdout:
                print(f"\nüìÑ STDOUT:")
                print(result.stdout)
            
            if result.stderr:
                print(f"\n‚ö†Ô∏è STDERR:")
                print(result.stderr)
            
            test_result = {
                'description': description,
                'command': ' '.join(cmd),
                'success': success,
                'duration': duration,
                'return_code': result.returncode,
                'stdout': result.stdout,
                'stderr': result.stderr
            }
            
            self.results.append(test_result)
            return test_result
            
        except subprocess.TimeoutExpired:
            duration = time.time() - start_time
            print(f"‚è∞ TIMEOUT –ø–æ—Å–ª–µ {duration:.2f}s")
            
            test_result = {
                'description': description,
                'command': ' '.join(cmd),
                'success': False,
                'duration': duration,
                'return_code': -1,
                'stdout': '',
                'stderr': 'Timeout expired'
            }
            
            self.results.append(test_result)
            return test_result
        
        except Exception as e:
            duration = time.time() - start_time
            print(f"üí• –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            
            test_result = {
                'description': description,
                'command': ' '.join(cmd),
                'success': False,
                'duration': duration,
                'return_code': -2,
                'stdout': '',
                'stderr': str(e)
            }
            
            self.results.append(test_result)
            return test_result
    
    def run_unit_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ unit —Ç–µ—Å—Ç—ã"""
        cmd = [
            sys.executable, '-m', 'pytest',
            'tests/rag/',
            '-v',
            '-m', 'unit and not slow',
            '--tb=short'
        ]
        return self.run_command(cmd, "Unit —Ç–µ—Å—Ç—ã RAG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    def run_integration_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        cmd = [
            sys.executable, '-m', 'pytest',
            'tests/rag/test_rag_integration.py',
            '-v',
            '--tb=short'
        ]
        return self.run_command(cmd, "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã RAG")
    
    def run_e2e_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç E2E —Ç–µ—Å—Ç—ã CLI"""
        cmd = [
            sys.executable, '-m', 'pytest',
            'tests/rag/test_rag_e2e_cli.py',
            '-v',
            '-m', 'not slow',
            '--tb=short'
        ]
        return self.run_command(cmd, "End-to-End —Ç–µ—Å—Ç—ã CLI")
    
    def run_performance_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        cmd = [
            sys.executable, '-m', 'pytest',
            'tests/rag/test_rag_performance.py',
            '-v',
            '-m', 'not stress and not benchmark',
            '--tb=short'
        ]
        return self.run_command(cmd, "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RAG")
    
    def run_stress_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã"""
        cmd = [
            sys.executable, '-m', 'pytest',
            'tests/rag/test_rag_performance.py',
            '-v',
            '-m', 'stress',
            '--tb=short'
        ]
        return self.run_command(cmd, "–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã RAG")
    
    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ RAG —Ç–µ—Å—Ç—ã"""
        cmd = [
            sys.executable, '-m', 'pytest',
            'tests/rag/',
            '-v',
            '--tb=short'
        ]
        return self.run_command(cmd, "–í—Å–µ —Ç–µ—Å—Ç—ã RAG —Å–∏—Å—Ç–µ–º—ã")
    
    def run_smoke_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥—ã–º–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        cmd = [
            sys.executable, '-m', 'pytest',
            'tests/rag/',
            '-v',
            '-m', 'smoke or (unit and not slow)',
            '--tb=line',
            '-x'  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
        ]
        return self.run_command(cmd, "–î—ã–º–æ–≤—ã–µ —Ç–µ—Å—Ç—ã RAG")
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º"""
        print(f"\n{'='*80}")
        print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø RAG –°–ò–°–¢–ï–ú–´")
        print(f"{'='*80}")
        
        total_tests = len(self.results)
        successful_tests = sum(1 for r in self.results if r['success'])
        failed_tests = total_tests - successful_tests
        total_duration = sum(r['duration'] for r in self.results)
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests} ‚úÖ")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests} ‚ùå")
        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.2f}s")
        print()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–±–æ—Ä—É
        for i, result in enumerate(self.results, 1):
            status = "‚úÖ –£–°–ü–ï–•" if result['success'] else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"{i}. {result['description']}: {status} ({result['duration']:.2f}s)")
            
            if not result['success'] and result['stderr']:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—à–∏–±–∫–∏
                error_lines = result['stderr'].split('\n')[:3]
                for line in error_lines:
                    if line.strip():
                        print(f"   üí• {line.strip()}")
        
        print(f"\n{'='*80}")
        
        if failed_tests == 0:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            return True
        else:
            print(f"‚ö†Ô∏è {failed_tests} –ù–ê–ë–û–†–û–í –¢–ï–°–¢–û–í –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ RAG —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument(
        'test_type',
        nargs='?',
        default='smoke',
        choices=['unit', 'integration', 'e2e', 'performance', 'stress', 'all', 'smoke'],
        help='–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞'
    )
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    args = parser.parse_args()
    
    runner = RAGTestRunner()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ RAG —Å–∏—Å—Ç–µ–º—ã...")
    print(f"–¢–∏–ø —Ç–µ—Å—Ç–æ–≤: {args.test_type}")
    print(f"–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {runner.base_path}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if args.test_type == 'unit':
        runner.run_unit_tests()
    elif args.test_type == 'integration':
        runner.run_integration_tests()
    elif args.test_type == 'e2e':
        runner.run_e2e_tests()
    elif args.test_type == 'performance':
        runner.run_performance_tests()
    elif args.test_type == 'stress':
        runner.run_stress_tests()
    elif args.test_type == 'smoke':
        runner.run_smoke_tests()
    elif args.test_type == 'all':
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        runner.run_unit_tests()
        runner.run_integration_tests()
        runner.run_e2e_tests()
        runner.run_performance_tests()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
    success = runner.print_summary()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π exit code
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()