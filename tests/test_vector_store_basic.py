#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ QdrantVectorStore.
"""

import sys
import traceback
import numpy as np
from dataclasses import asdict

def test_basic_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ config
    print("  ‚û§ –ò–º–ø–æ—Ä—Ç config...")
    from config import VectorStoreConfig
    print("    ‚úÖ config.VectorStoreConfig")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ exceptions
    print("  ‚û§ –ò–º–ø–æ—Ä—Ç rag.exceptions...")
    from rag.exceptions import VectorStoreException, VectorStoreConnectionError
    print("    ‚úÖ rag.exceptions")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    print("  ‚û§ –ò–º–ø–æ—Ä—Ç rag.vector_store...")
    from rag.vector_store import QdrantVectorStore
    print("    ‚úÖ rag.vector_store.QdrantVectorStore")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Qdrant –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
    print("  ‚û§ –ò–º–ø–æ—Ä—Ç qdrant-client...")
    from qdrant_client import QdrantClient
    from qdrant_client.models import Distance, VectorParams
    print("    ‚úÖ qdrant_client")
    
    # –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º assert –≤–º–µ—Å—Ç–æ return
    assert VectorStoreConfig is not None
    assert QdrantVectorStore is not None
    assert QdrantClient is not None

def test_config_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VectorStore"""
    from config import VectorStoreConfig
    
    config = VectorStoreConfig(
        host="localhost",
        port=6333,
        prefer_grpc=True,
        collection_name="test_collection",
        vector_size=384,
        distance="cosine"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    assert config.host == "localhost"
    assert config.port == 6333
    assert config.prefer_grpc == True
    assert config.collection_name == "test_collection"
    assert config.vector_size == 384
    assert config.distance == "cosine"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    assert config.hnsw_m >= 16
    assert config.hnsw_ef_construct >= 64
    assert config.quantization_type in ["SQ", "PQ", "BQ"]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º assert –≤–º–µ—Å—Ç–æ return
    assert config is not None

def test_qdrant_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é QdrantVectorStore (–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ QdrantVectorStore...")
    
    try:
        from config import VectorStoreConfig
        from rag.vector_store import QdrantVectorStore
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = VectorStoreConfig(
            host="localhost",  # –ù–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ä–µ–∞–ª—å–Ω–æ
            port=6333,
            collection_name="test_collection",
            vector_size=384
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
        vector_store = QdrantVectorStore(config)
        
        print("    ‚úÖ QdrantVectorStore –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"    ‚û§ –•–æ—Å—Ç: {vector_store.config.host}")
        print(f"    ‚û§ –ü–æ—Ä—Ç: {vector_store.config.port}")
        print(f"    ‚û§ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {vector_store.config.collection_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        stats = vector_store.get_stats()
        print(f"    ‚û§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(stats)} –ø–æ–ª–µ–π")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º assert –≤–º–µ—Å—Ç–æ return
        assert vector_store is not None
        assert stats is not None
        assert len(stats) > 0
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        # –ü–∞–¥–∞–µ–º –≤ —Ç–µ—Å—Ç–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        assert False, f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}"

def test_collection_config_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
    
    from config import VectorStoreConfig
    from rag.vector_store import QdrantVectorStore
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_configs = [
        {
            "name": "SQ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ",
            "quantization_type": "SQ",
            "vector_size": 384,
            "hnsw_m": 16
        },
        {
            "name": "PQ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ", 
            "quantization_type": "PQ",
            "vector_size": 256,
            "hnsw_m": 32
        },
        {
            "name": "–ë–µ–∑ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è",
            "quantization_type": "SQ",
            "enable_quantization": False,
            "vector_size": 384,
            "hnsw_m": 24
        }
    ]
    
    for test_config in test_configs:
        print(f"\n  ‚û§ –¢–µ—Å—Ç: {test_config['name']}")
        
        config = VectorStoreConfig(
            host="localhost",
            port=6333,
            collection_name="test",
            vector_size=test_config["vector_size"],
            quantization_type=test_config["quantization_type"],
            enable_quantization=test_config.get("enable_quantization", True),
            hnsw_m=test_config["hnsw_m"]
        )
        
        vector_store = QdrantVectorStore(config)
        collection_config = vector_store._create_collection_config()
        
        print(f"    ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"    ‚û§ –†–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞: {collection_config['vectors_config'].size}")
        print(f"    ‚û§ Distance: {collection_config['vectors_config'].distance}")
        print(f"    ‚û§ On disk: {collection_config['vectors_config'].on_disk}")
        print(f"    ‚û§ –ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if collection_config['vectors_config'].quantization_config else '–í—ã–∫–ª—é—á–µ–Ω–æ'}")
    
    # –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º assert
    assert config is not None
    assert collection_config is not None
    assert 'vectors_config' in collection_config

def test_points_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ—á–µ–∫"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—á–µ–∫...")
    
    from config import VectorStoreConfig
    from rag.vector_store import QdrantVectorStore
    
    config = VectorStoreConfig(vector_size=384)
    vector_store = QdrantVectorStore(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏
    test_points = [
        {
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–æ—á–∫–∞
            "id": "test_1",
            "vector": np.random.random(384).astype(np.float32),
            "payload": {
                "file": "test.py",
                "chunk_id": "chunk_1",
                "hash": "abc123"
            }
        },
        {
            # –¢–æ—á–∫–∞ –±–µ–∑ ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω)
            "vector": np.random.random(384).astype(np.float32),
            "payload": {"file": "test2.py"}
        },
        {
            # –¢–æ—á–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–±—Ä–æ—à–µ–Ω–∞)
            "id": "bad_point",
            "vector": np.random.random(128).astype(np.float32),
            "payload": {"file": "bad.py"}
        }
    ]
    
    validated_points = vector_store._validate_points(test_points)
    
    print(f"    ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print(f"    ‚û§ –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫: {len(test_points)}")
    print(f"    ‚û§ –í–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫: {len(validated_points)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É
    if validated_points:
        first_point = validated_points[0]
        print(f"    ‚û§ ID –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏: {first_point['id']}")
        print(f"    ‚û§ –†–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞: {len(first_point['vector'])}")
        print(f"    ‚û§ Payload –ø–æ–ª–µ–π: {len(first_point['payload'])}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ 2 –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ—á–∫–∏
    assert len(validated_points) == 2, f"–û–∂–∏–¥–∞–µ—Ç—Å—è 2 –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ—á–∫–∏, –ø–æ–ª—É—á–µ–Ω–æ {len(validated_points)}"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º assert –≤–º–µ—Å—Ç–æ return
    assert validated_points is not None
    assert len(validated_points) == 2

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QdrantVectorStore")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_basic_imports),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_config_creation),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", test_qdrant_initialization), 
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏", test_collection_config_generation),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—á–µ–∫", test_points_validation)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        try:
            test_func()  # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            results.append((test_name, True))  # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª
            print(f"  ‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    success_count = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"  {test_name:<35} {status}")
        if success:
            success_count += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {success_count}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if success_count == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ QdrantVectorStore –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        traceback.print_exc()
        sys.exit(1)
