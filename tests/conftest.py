# tests/conftest.py
# –û–±—â–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è pytest (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è)
import pytest
import sys
import os
from unittest.mock import patch

def pytest_addoption(parser):
    parser.addoption(
        "--run-symlink-tests",
        action="store_true",
        default=False,
        help="–Ø–≤–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã, —Å–æ–∑–¥–∞—é—â–∏–µ symlink (Windows —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/Developer Mode)"
    )

# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—á–∏–Ω–≥ CPUEmbedder –¥–ª—è offline —Ç–µ—Å—Ç–æ–≤
def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–∞—Ç—á–∏–Ω–≥–æ–º –¥–ª—è offline —Ç–µ—Å—Ç–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock —ç–º–±–µ–¥–¥–µ—Ä—ã
    from tests.mocks.mock_cpu_embedder import should_use_mock_embedder
    
    if should_use_mock_embedder():
        print("\nüîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω offline —Ä–µ–∂–∏–º - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º mock —ç–º–±–µ–¥–¥–µ—Ä—ã")
        
        # –ü–∞—Ç—á–∏–º CPUEmbedder –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
        try:
            from tests.mocks.mock_cpu_embedder import MockCPUEmbedder
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—á –¥–ª—è rag.embedder.CPUEmbedder
            embedder_patcher = patch('rag.embedder.CPUEmbedder', MockCPUEmbedder)
            embedder_patcher.start()
            
            # –¢–∞–∫–∂–µ –ø–∞—Ç—á–∏–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ rag –ø–∞–∫–µ—Ç–∞
            rag_embedder_patcher = patch('rag.CPUEmbedder', MockCPUEmbedder) 
            rag_embedder_patcher.start()
            
            # –í–ê–ñ–ù–û: –ø–∞—Ç—á–∏–º IndexerService –∫–æ—Ç–æ—Ä—ã–π –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç CPUEmbedder –Ω–∞–ø—Ä—è–º—É—é
            indexer_embedder_patcher = patch('rag.indexer_service.CPUEmbedder', MockCPUEmbedder)
            indexer_embedder_patcher.start()

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–∞—Ç—á–∏–º —Ç–æ—á–∫–∏ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ CPUEmbedder –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö –ø–æ–∏—Å–∫–∞/–¥–≤–∏–∂–∫–µ
            search_embedder_patcher = patch('rag.search_service.CPUEmbedder', MockCPUEmbedder)
            search_embedder_patcher.start()
            query_engine_embedder_patcher = patch('rag.query_engine.CPUEmbedder', MockCPUEmbedder)
            query_engine_embedder_patcher.start()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—á–µ—Ä—ã –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
            if not hasattr(config, '_mock_patchers'):
                config._mock_patchers = []
            config._mock_patchers.extend([
                embedder_patcher,
                rag_embedder_patcher,
                indexer_embedder_patcher,
                search_embedder_patcher,
                query_engine_embedder_patcher,
            ])
            
            print("‚úÖ Mock —ç–º–±–µ–¥–¥–µ—Ä—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
            
        except ImportError as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å mock —ç–º–±–µ–¥–¥–µ—Ä—ã: {e}")


def pytest_unconfigure(config):
    """–û—á–∏—Å—Ç–∫–∞ –ø–∞—Ç—á–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    if hasattr(config, '_mock_patchers'):
        for patcher in config._mock_patchers:
            try:
                patcher.stop()
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ç—á–µ—Ä–æ–≤


@pytest.fixture(autouse=True)
def reset_embedder_environment():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–º–±–µ–¥–¥–µ—Ä–æ–≤ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏"""
    yield
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    import gc
    gc.collect()


@pytest.fixture
def mock_cpu_embedder_offline():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è mock —ç–º–±–µ–¥–¥–µ—Ä–∞.
    –ü–æ–ª–µ–∑–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–µ–Ω –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ mock —ç–º–±–µ–¥–¥–µ—Ä.
    """
    from tests.mocks.mock_cpu_embedder import MockCPUEmbedder
    from config import EmbeddingConfig, ParallelismConfig
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è mock'–∞
    embedding_config = EmbeddingConfig(
        provider="fastembed",
        model_name="BAAI/bge-small-en-v1.5",
        batch_size_min=4,
        batch_size_max=16,
        warmup_enabled=False
    )
    
    parallelism_config = ParallelismConfig(
        torch_num_threads=2,
        omp_num_threads=2,
        mkl_num_threads=2
    )
    
    return MockCPUEmbedder(embedding_config, parallelism_config)
