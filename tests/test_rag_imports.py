"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ RAG —Å–∏—Å—Ç–µ–º—ã.
"""

import sys
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_basic_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ ===")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    from config import EmbeddingConfig, ParallelismConfig, RagConfig
    logger.info("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ RAG –º–æ–¥—É–ª—è
    import rag
    logger.info(f"‚úì RAG –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –≤–µ—Ä—Å–∏—è: {rag.__version__}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    from rag.exceptions import (
        RagException, EmbeddingException, VectorStoreException,
        QueryEngineException, ModelLoadException, OutOfMemoryException
    )
    logger.info("‚úì –ò—Å–∫–ª—é—á–µ–Ω–∏—è RAG –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    # –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã
    assert rag is not None
    assert EmbeddingConfig is not None

def test_embedder_initialization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–µ—Ä–∞"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CPUEmbedder ===")
    
    from rag import CPUEmbedder
    from config import EmbeddingConfig, ParallelismConfig
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    embedding_config = EmbeddingConfig(
        provider="fastembed",
        model_name="BAAI/bge-small-en-v1.5",
        warmup_enabled=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    )
    
    parallelism_config = ParallelismConfig(
        torch_num_threads=2,
        omp_num_threads=2,
        mkl_num_threads=2
    )
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–µ—Ä–∞ (–º–æ–∂–µ—Ç –Ω–µ —É–¥–∞—Å—Ç—Å—è –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    try:
        embedder = CPUEmbedder(embedding_config, parallelism_config)
        logger.info("‚úì CPUEmbedder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = embedder.get_stats()
        logger.info(f"‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–±–µ–¥–¥–µ—Ä–∞: {stats['provider']}, –º–æ–¥–µ–ª—å: {stats['model_name']}")
        
        assert embedder is not None
        assert stats is not None
        
    except ImportError as e:
        logger.warning(f"‚ö† CPUEmbedder –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏): {e}")
        logger.info("‚úì –ö–ª–∞—Å—Å CPUEmbedder –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
        assert CPUEmbedder is not None

def test_vector_store_stub():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ VectorStore"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ VectorStore ===")
    
    from rag import VectorStore
    from config import VectorStoreConfig
    
    if VectorStore is None:
        logger.info("‚úì VectorStore –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ None (–∑–∞–≥–ª—É—à–∫–∞)")
        assert True
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = VectorStoreConfig()
    
    # –°–æ–∑–¥–∞–µ–º VectorStore
    vector_store = VectorStore(config)
    logger.info("‚úì VectorStore (–∑–∞–≥–ª—É—à–∫–∞) —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = vector_store.get_stats()
    logger.info(f"‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VectorStore: {stats['status']}")
    
    assert vector_store is not None
    assert stats is not None

def test_query_engine_stub():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ QueryEngine"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ QueryEngine ===")
    
    from rag import QueryEngine
    
    if QueryEngine is None:
        logger.info("‚úì QueryEngine –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ None (–∑–∞–≥–ª—É—à–∫–∞)")
        assert True
        return
    
    logger.info("‚úì QueryEngine –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
    assert QueryEngine is not None

def test_rag_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã RAG –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    logger.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã RAG –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ===")
    
    rag_dir = Path("rag")
    
    required_files = [
        "__init__.py",
        "embedder.py", 
        "exceptions.py",
        "vector_store.py",
        "query_engine.py"
    ]
    
    missing_files = []
    for file_name in required_files:
        file_path = rag_dir / file_name
        if file_path.exists():
            logger.info(f"‚úì {file_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            logger.error(f"‚úó {file_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            missing_files.append(file_name)
    
    assert not missing_files, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {missing_files}"
    
    logger.info("‚úì –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")

def test_config_compatibility():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    logger.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    
    from config import get_config
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –Ω–µ —É–¥–∞—Å—Ç—Å—è –±–µ–∑ settings.json)
    try:
        config = get_config(require_api_key=False)
        logger.info("‚úì –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        rag_config = config.rag
        logger.info(f"‚úì RAG –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞:")
        logger.info(f"  - –ü—Ä–æ–≤–∞–π–¥–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {rag_config.embeddings.provider}")
        logger.info(f"  - –ú–æ–¥–µ–ª—å: {rag_config.embeddings.model_name}")
        logger.info(f"  - –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {rag_config.vector_store.host}:{rag_config.vector_store.port}")
        
        assert config is not None
        assert rag_config is not None
        
    except FileNotFoundError:
        logger.warning("‚ö† –§–∞–π–ª settings.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é RAG –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from config import RagConfig
        rag_config = RagConfig()
        logger.info(f"‚úì –î–µ—Ñ–æ–ª—Ç–Ω–∞—è RAG –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:")
        logger.info(f"  - –ü—Ä–æ–≤–∞–π–¥–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {rag_config.embeddings.provider}")
        logger.info(f"  - –ú–æ–¥–µ–ª—å: {rag_config.embeddings.model_name}")
        
        assert rag_config is not None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG —Å–∏—Å—Ç–µ–º—ã...")
    
    tests = [
        ("–ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã", test_basic_imports),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", test_rag_structure),
        ("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_config_compatibility),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CPUEmbedder", test_embedder_initialization),
        ("–ó–∞–≥–ª—É—à–∫–∞ VectorStore", test_vector_store_stub),
        ("–ó–∞–≥–ª—É—à–∫–∞ QueryEngine", test_query_engine_stub),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\n--- {test_name} ---")
        try:
            test_func()  # –£–±–∏—Ä–∞–µ–º result = —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ–ª—å—à–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è
            results.append((test_name, True))  # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "="*50)
    logger.info("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("="*50)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úì –ü–†–û–ô–î–ï–ù" if result else "‚úó –ù–ï–£–î–ê–ß–ï–ù"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
        else:
            failed += 1
    
    logger.info(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    logger.info(f"–ù–µ—É–¥–∞—á–Ω–æ: {failed}")
    
    if failed == 0:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return True
    else:
        logger.warning(f"‚ö† {failed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
